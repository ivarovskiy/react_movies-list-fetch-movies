{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","FindMovie","addMovie","useState","searchMovie","setSearchMovie","setMovie","isTitleInput","setIsTitleInput","isMovieFound","setIsMovieFound","getMovie","movieTitle","a","fetch","then","result","json","foundedMovie","Response","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","target","onClick","App","setMovies","some","film","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"iUAOaA,EAA6B,SAACC,GACzC,IAAQC,EAAUD,EAAVC,MAER,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,KACP,iCC7BGC,EAA8B,SAACR,GAC1C,IAAQS,EAAWT,EAAXS,OAER,OACE,qBAAKP,UAAU,SAAf,SACGO,EAAOC,KAAI,SAAAT,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMU,c,+CCLRC,EAA6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3C,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0BF,mBAAuB,MAAjD,mBAAOb,EAAP,KAAcgB,EAAd,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAwCL,oBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sECfVC,MAAM,8CAAD,ODgB2BF,ICfpCG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UDcR,OAGe,WAFxBC,EADS,QAGEC,UACfT,GAAgB,GAChBF,GAAgB,KAEhBF,EAASY,GACTR,GAAgB,IARH,2CAAH,sDAyBd,OACE,qCACE,uBAAMnB,UAAU,aAAa6B,SARZ,SAACC,GACpBA,EAAMC,iBACNpB,EAASZ,GACTe,EAAe,KAKb,UACE,sBAAKd,UAAU,QAAf,UACE,wBAAOA,UAAU,QAAQgC,QAAQ,cAAjC,wBAGE,qBAAKhC,UAAU,UAAf,SACE,uBACEiC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZnC,UAAWoC,IAAW,QACpB,CACE,aAAclB,IAElBmB,MAAOxB,EACPyB,SA9BM,SAACR,GACnB,IAAQO,EAAUP,EAAMS,OAAhBF,MAERvB,EAAeuB,GACfpB,GAAgB,YA+BRD,GAEE,mBAAGhB,UAAU,iBAAb,qDAKN,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEiC,KAAK,SACLjC,UAAU,kBACVwC,QAAS,kBAAMpB,EAASP,IAH1B,4BASF,qBAAKb,UAAU,UAAf,SACE,wBACEiC,KAAK,SACLjC,UAAU,oBAFZ,qCAUN,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,mBACMkB,EACA,UACA,qBAEJA,GAAgBnB,GAAU,cAAC,EAAD,CAAWA,MAAOA,WE7FzC0C,EAAoB,WAC/B,MAA4B7B,mBAAkB,IAA9C,mBAAOL,EAAP,KAAemC,EAAf,KAWA,OACE,sBAAK1C,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYO,OAAQA,MAEtB,qBAAKP,UAAU,UAAf,SACE,cAAC,EAAD,CAAWW,SAfA,SAACZ,GACZA,IAAUQ,EAAOoC,MAAK,SAAAC,GAAI,OAAI7C,EAAMU,SAAWmC,EAAKnC,WACtDiC,GAAU,SAAAG,GAAU,4BACfA,GADe,CAElB9C,gBCRR+C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2cffefd6.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovies } from '../../api';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addMovie: (movie: Movie | null) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [searchMovie, setSearchMovie] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isTitleInput, setIsTitleInput] = useState(true);\n  const [isMovieFound, setIsMovieFound] = useState(true);\n\n  const getMovie = async (movieTitle: string) => {\n    const foundedMovie = await getMovies(movieTitle);\n\n    if (foundedMovie.Response === 'False') {\n      setIsMovieFound(false);\n      setIsTitleInput(false);\n    } else {\n      setMovie(foundedMovie);\n      setIsMovieFound(true);\n    }\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setSearchMovie(value);\n    setIsTitleInput(true);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    addMovie(movie);\n    setSearchMovie('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className={classNames('input',\n                  {\n                    'is-danger': !isMovieFound,\n                  })}\n                value={searchMovie}\n                onChange={handleInput}\n              />\n            </div>\n          </label>\n\n          {!isTitleInput\n            && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => getMovie(searchMovie)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">\n          {`${isMovieFound\n            ? 'Preview'\n            : 'Movie not found'}`}\n        </h2>\n        {(isMovieFound && movie) && <MovieCard movie={movie} />}\n      </div>\n    </>\n  );\n};\n","export const getMovies = (title: string) => {\n  return fetch(`https://www.omdbapi.com/?apikey=3ad1865f&t=${title}`)\n    .then(result => result.json());\n};\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC<{}> = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie | null) => {\n    if (movie && !movies.some(film => movie.imdbID === film.imdbID)) {\n      setMovies(prevMovies => [\n        ...prevMovies,\n        movie,\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}